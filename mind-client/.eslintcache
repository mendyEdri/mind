[{"/Users/mendye/Development/github/mind/mind-client/src/index.tsx":"1","/Users/mendye/Development/github/mind/mind-client/src/reportWebVitals.ts":"2","/Users/mendye/Development/github/mind/mind-client/src/Config/ApolloProvider.tsx":"3","/Users/mendye/Development/github/mind/mind-client/src/App/App.tsx":"4","/Users/mendye/Development/github/mind/mind-client/src/pages/Home.tsx":"5","/Users/mendye/Development/github/mind/mind-client/src/pages/Login.tsx":"6","/Users/mendye/Development/github/mind/mind-client/src/pages/Register.tsx":"7","/Users/mendye/Development/github/mind/mind-client/src/pages/NotFound.tsx":"8","/Users/mendye/Development/github/mind/mind-client/src/Components/MenuBar.tsx":"9","/Users/mendye/Development/github/mind/mind-client/src/Components/PostCard.tsx":"10","/Users/mendye/Development/github/mind/mind-client/src/utils/hooks.ts":"11","/Users/mendye/Development/github/mind/mind-client/src/context/auth.tsx":"12","/Users/mendye/Development/github/mind/mind-client/src/utils/AuthRoute.tsx":"13","/Users/mendye/Development/github/mind/mind-client/src/Pages/NotFound.tsx":"14","/Users/mendye/Development/github/mind/mind-client/src/Pages/Register.tsx":"15","/Users/mendye/Development/github/mind/mind-client/src/Pages/Home.tsx":"16","/Users/mendye/Development/github/mind/mind-client/src/Pages/Login.tsx":"17","/Users/mendye/Development/github/mind/mind-client/src/Utils/AuthRoute.tsx":"18","/Users/mendye/Development/github/mind/mind-client/src/Context/auth.tsx":"19","/Users/mendye/Development/github/mind/mind-client/src/Utils/hooks.ts":"20","/Users/mendye/Development/github/mind/mind-client/src/Utils/ProtectedRoute.tsx":"21","/Users/mendye/Development/github/mind/mind-client/src/Components/PostForm.tsx":"22","/Users/mendye/Development/github/mind/mind-client/src/Queries/posts.ts":"23","/Users/mendye/Development/github/mind/mind-client/src/Queries/login.ts":"24","/Users/mendye/Development/github/mind/mind-client/src/Queries/register.ts":"25","/Users/mendye/Development/github/mind/mind-client/src/Components/LikeButton.tsx":"26","/Users/mendye/Development/github/mind/mind-client/src/Queries/like.ts":"27","/Users/mendye/Development/github/mind/mind-client/src/Components/Popup.tsx":"28","/Users/mendye/Development/github/mind/mind-client/src/Pages/SinglePost.tsx":"29","/Users/mendye/Development/github/mind/mind-client/src/Queries/post.ts":"30","/Users/mendye/Development/github/mind/mind-client/src/Components/DeleteButton.tsx":"31","/Users/mendye/Development/github/mind/mind-client/src/Queries/deletePost.ts":"32","/Users/mendye/Development/github/mind/mind-client/src/Queries/comments.ts":"33"},{"size":473,"mtime":1607348399613,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1607338890357,"results":"36","hashOfConfig":"35"},{"size":765,"mtime":1607436177301,"results":"37","hashOfConfig":"35"},{"size":1155,"mtime":1607511121794,"results":"38","hashOfConfig":"35"},{"size":801,"mtime":1607429885326,"results":"39","hashOfConfig":"35"},{"size":2525,"mtime":1607428937225,"results":"40","hashOfConfig":"35"},{"size":3370,"mtime":1607428323020,"results":"41","hashOfConfig":"35"},{"size":148,"mtime":1607349122169,"results":"42","hashOfConfig":"35"},{"size":1709,"mtime":1607428812934,"results":"43","hashOfConfig":"35"},{"size":1633,"mtime":1607502364284,"results":"44","hashOfConfig":"35"},{"size":404,"mtime":1607417152285,"results":"45","hashOfConfig":"35"},{"size":1491,"mtime":1607424883639,"results":"46","hashOfConfig":"35"},{"size":411,"mtime":1607428323020,"results":"47","hashOfConfig":"35"},{"size":148,"mtime":1607349122169,"results":"48","hashOfConfig":"35"},{"size":3331,"mtime":1607439943168,"results":"49","hashOfConfig":"35"},{"size":1082,"mtime":1607442032017,"results":"50","hashOfConfig":"35"},{"size":2510,"mtime":1607439918200,"results":"51","hashOfConfig":"35"},{"size":411,"mtime":1607428323020,"results":"52","hashOfConfig":"35"},{"size":1500,"mtime":1607435758166,"results":"53","hashOfConfig":"35"},{"size":404,"mtime":1607417152285,"results":"54","hashOfConfig":"35"},{"size":426,"mtime":1607428623590,"results":"55","hashOfConfig":"35"},{"size":1636,"mtime":1607513416716,"results":"56","hashOfConfig":"35"},{"size":658,"mtime":1607438425689,"results":"57","hashOfConfig":"35"},{"size":264,"mtime":1607418464019,"results":"58","hashOfConfig":"35"},{"size":521,"mtime":1607356578827,"results":"59","hashOfConfig":"35"},{"size":1252,"mtime":1607444455320,"results":"60","hashOfConfig":"35"},{"size":236,"mtime":1607443088835,"results":"61","hashOfConfig":"35"},{"size":205,"mtime":1607442990307,"results":"62","hashOfConfig":"35"},{"size":4698,"mtime":1607519829886,"results":"63","hashOfConfig":"35"},{"size":357,"mtime":1607510066866,"results":"64","hashOfConfig":"35"},{"size":1476,"mtime":1607518611999,"results":"65","hashOfConfig":"35"},{"size":169,"mtime":1607503264285,"results":"66","hashOfConfig":"35"},{"size":581,"mtime":1607518737400,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1p0k9yg",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mendye/Development/github/mind/mind-client/src/index.tsx",[],["140","141"],"/Users/mendye/Development/github/mind/mind-client/src/reportWebVitals.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Config/ApolloProvider.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/App/App.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/pages/Home.tsx",[],["142","143"],"/Users/mendye/Development/github/mind/mind-client/src/pages/Login.tsx",["144"],"import React, { useState, useMemo, useContext } from \"react\";\nimport { Form, Button, Container } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { AuthContext } from \"../context/auth\";\nimport { LOGIN_USER } from \"../Api/login\";\nimport { useForm } from \"../utils/hooks\";\nimport { InputData } from \"./Register\";\n\ntype LoginFormType = {\n  username?: string;\n  password?: string;\n};\n\nconst Login = (props) => {\n  const context = useContext(AuthContext);\n\n  const [errors, setErrors] = useState<LoginFormType | undefined>({});\n\n  const initialState: LoginFormType = {\n    username: \"\",\n    password: \"\",\n  };\n\n  const { onChange, onSubmit, values } = useForm<LoginFormType>(\n    hoistedLoginUser,\n    initialState\n  );\n\n  const onRequestUpdate = (_, { data: { login: userData } }) => {\n    context.login(userData);\n    props.history.push(\"/\");\n  };\n\n  const onRequestError = (err) => {\n    setErrors(err?.graphQLErrors[0]?.extensions?.exception?.errors);\n  };\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update: onRequestUpdate,\n    onError: onRequestError,\n    variables: values,\n  });\n\n  function hoistedLoginUser() {\n    loginUser();\n  }\n\n  const renderInput = (data: InputData) => {\n    return <Form.Input {...data} />;\n  };\n\n  const renderButton = () => {\n    return (\n      <Button type=\"submit\" secondary>\n        Login\n      </Button>\n    );\n  };\n\n  const errorsLabels = useMemo((): JSX.Element => {\n    if (Object.keys(errors).length > 0) {\n      return (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => {\n              return <li key={value + \"\"}>{value}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    }\n  }, [errors]);\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValid className={loading ? \"loading\" : \"\"}>\n        {renderInput({\n          label: \"username\",\n          placeholder: \"Username..\",\n          name: \"username\",\n          type: \"text\",\n          value: values.username,\n          error: errors.username ? true : false,\n          onChange,\n        })}\n        {renderInput({\n          label: \"Password\",\n          placeholder: \"Password..\",\n          name: \"password\",\n          type: \"password\",\n          value: values.password,\n          error: errors.password ? true : false,\n          onChange,\n        })}\n        {renderButton()}\n      </Form>\n      {errorsLabels}\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/mendye/Development/github/mind/mind-client/src/pages/Register.tsx",["145"],"import React, { useState, useMemo, useContext } from \"react\";\nimport { Form, Button, Container } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { AuthContext } from \"../context/auth\";\nimport { REGISTER_USER } from \"../Api/register\";\nimport {useForm} from '../utils/hooks';\n\ntype InputData = {\n  label: string;\n  placeholder: string;\n  name: string;\n  value: string;\n  type: string;\n  error: boolean;\n  onChange: (event: any) => void;\n};\n\ntype RegisterFormType = {\n    username?: string;\n    email?: string;\n    password?: string;\n    confirmPassword?: string;\n}\n\nconst Register = (props) => {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState<RegisterFormType | undefined>({});\n\n  const initialState: RegisterFormType = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const {onChange, onSubmit, values} = useForm<RegisterFormType>(hoistedRegisterUser, initialState);\n\n  const onRequestUpdate = (_, {data: {register: userData}}) => {\n    context.login(userData);\n    props.history.push('/')\n  }\n\n  const onRequestError = (err) => {\n    setErrors(err?.graphQLErrors[0]?.extensions?.exception?.errors);\n  }\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update: onRequestUpdate,\n    onError: onRequestError,\n    variables: values,\n  });\n\n  function hoistedRegisterUser() {\n      addUser();\n  }\n\n  const renderInput = (data: InputData) => {\n    return <Form.Input {...data} />;\n  };\n\n  const renderButton = () => {\n    return (\n      <Button type=\"submit\" secondary>\n        Register\n      </Button>\n    );\n  };\n\n  const errorsLabels = useMemo((): JSX.Element => {\n    if (Object.keys(errors).length > 0) {\n    console.log(errors)\n      return (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => {\n              return (<li key={value + ''}>{value}</li>)\n            })}\n          </ul>\n        </div>\n      );\n    }\n  }, [errors]);\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValid className={loading ? \"loading\" : \"\"}>\n        {renderInput({\n          label: \"username\",\n          placeholder: \"Username..\",\n          name: \"username\",\n          type: \"text\",\n          value: values.username,\n          error: errors.username ? true : false,\n          onChange,\n        })}\n        {renderInput({\n          label: \"Email\",\n          placeholder: \"Email..\",\n          name: \"email\",\n          type: \"email\",\n          error: errors.email ? true: false,\n          value: values.email,\n          onChange,\n        })}\n        {renderInput({\n          label: \"Password\",\n          placeholder: \"Password..\",\n          name: \"password\",\n          type: \"password\",\n          value: values.password,\n          error: errors.password ? true : false,\n          onChange,\n        })}\n        {renderInput({\n          label: \"Confirm Password\",\n          placeholder: \"Confirm Password..\",\n          type: \"password\",\n          name: \"confirmPassword\",\n          value: values.confirmPassword,\n          error: errors.confirmPassword ? true : false,\n          onChange,\n        })}\n        {renderButton()}\n      </Form>\n      {errorsLabels}\n    </div>\n  );\n};\n\nexport default Register;\nexport type {\n    InputData,\n    RegisterFormType\n};","/Users/mendye/Development/github/mind/mind-client/src/pages/NotFound.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Components/MenuBar.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Components/PostCard.tsx",["146","147"],"import React, { useContext } from \"react\";\nimport { Button, Card, Image, Icon, Label } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport { AuthContext } from \"../Context/auth\";\nimport LikeButton from \"./LikeButton\";\nimport DeleteButton from \"./DeleteButton\";\n\nconst PostCard = ({\n  post: { body, createdAt, id, username, likeCount, commentCount, likes },\n}) => {\n  const { user } = useContext(AuthContext);\n\n  const renderComment = () => {};\n\n  const renderLike = () => {};\n\n  const renderExtraButtons = () => {\n    return (\n      <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n        <Button color=\"blue\" basic>\n          <Icon name=\"comments\" />\n        </Button>\n        <Label basic color=\"blue\" pointing=\"left\">\n          {commentCount}\n        </Label>\n      </Button>\n    );\n  };\n\n  const renderDeleteButton = () => {\n    return user && user.username === username && <DeleteButton postId={id} />;\n  };\n\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Image\n          floated=\"right\"\n          size=\"mini\"\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n        />\n        <Card.Header>{username}</Card.Header>\n        <Card.Meta as={Link} to={`/posts/${id}`}>\n          {moment(createdAt).fromNow()}\n        </Card.Meta>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\n        {renderExtraButtons()}\n        {renderDeleteButton()}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default PostCard;\n","/Users/mendye/Development/github/mind/mind-client/src/utils/hooks.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/context/auth.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/utils/AuthRoute.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Pages/NotFound.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Pages/Register.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Pages/Home.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Pages/Login.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Utils/AuthRoute.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Context/auth.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Utils/hooks.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Utils/ProtectedRoute.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Components/PostForm.tsx",["148"],"/Users/mendye/Development/github/mind/mind-client/src/Queries/posts.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Queries/login.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Queries/register.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Components/LikeButton.tsx",["149"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Button, Label, Icon } from 'semantic-ui-react';\n\nimport {LIKE_POST} from '../Queries/like';\nimport Popup from './Popup';\n\ntype PropsType = {\n  user: any;\n  post: any\n}\n\nconst LikeButton = ({ user, post: { id, likeCount, likes } }) => {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, likes]);\n\n  const [likePost] = useMutation(LIKE_POST, {\n    variables: { postId: id }\n  });\n\n  const likeButton = user ? (\n    liked ? (\n      <Button>\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button basic>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to=\"/login\" basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n\n  return (\n    <Button as=\"div\" labelPosition=\"right\" onClick={() => likePost()}>\n      <Popup content={liked ? 'Unlike' : 'Like'}>{likeButton}</Popup>\n      <Label basic color=\"teal\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  );\n}\n\nexport default LikeButton;","/Users/mendye/Development/github/mind/mind-client/src/Queries/like.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Components/Popup.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Pages/SinglePost.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Queries/post.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Components/DeleteButton.tsx",[],"/Users/mendye/Development/github/mind/mind-client/src/Queries/deletePost.ts",[],"/Users/mendye/Development/github/mind/mind-client/src/Queries/comments.ts",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"150","replacedBy":"154"},{"ruleId":"152","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":2,"column":24,"nodeType":"158","messageId":"159","endLine":2,"endColumn":33},{"ruleId":"156","severity":1,"message":"157","line":2,"column":24,"nodeType":"158","messageId":"159","endLine":2,"endColumn":33},{"ruleId":"156","severity":1,"message":"160","line":15,"column":9,"nodeType":"158","messageId":"159","endLine":15,"endColumn":22},{"ruleId":"156","severity":1,"message":"161","line":17,"column":9,"nodeType":"158","messageId":"159","endLine":17,"endColumn":19},{"ruleId":"156","severity":1,"message":"162","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":9},{"ruleId":"156","severity":1,"message":"163","line":9,"column":6,"nodeType":"158","messageId":"159","endLine":9,"endColumn":15},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],["164"],["165"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'renderComment' is assigned a value but never used.","'renderLike' is assigned a value but never used.","'_' is defined but never used.","'PropsType' is defined but never used.","no-global-assign","no-unsafe-negation"]